import numpy as np 

def solve_model(T,state):
    X1, X2, X3, X4, X5, X6, X7, X8, Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8 = state
    dX1 = -X1*0
    dX2 = -X2*0
    dX3 = -X3*0
    dX4 = -X4*0
    dX5 = -X5*0
    dX6 = -X6*0
    dX7 = -X7*0
    dX8 = -X8*0
    dY1 = -Y1*0.1+10*(((X2/1)**2)*((X3/1)**2)*((X4/1)**2))/(1+((X2/1)**2)+((X3/1)**2)+((X4/1)**2)+((X8/1)**2)+((X2/1)**2)*((X3/1)**2)+((X2/1)**2)*((X4/1)**2)+((X2/1)**2)*((X8/1)**2)+((X3/1)**2)*((X4/1)**2)+((X3/1)**2)*((X8/1)**2)+((X4/1)**2)*((X8/1)**2)+((X2/1)**2)*((X3/1)**2)*((X4/1)**2)+((X2/1)**2)*((X3/1)**2)*((X8/1)**2)+((X2/1)**2)*((X4/1)**2)*((X8/1)**2)+((X3/1)**2)*((X4/1)**2)*((X8/1)**2)+((X2/1)**2)*((X3/1)**2)*((X4/1)**2)*((X8/1)**2))+10*(((X2/1)**2)*((X3/1)**2)*((X8/1)**2))/(1+((X2/1)**2)+((X3/1)**2)+((X4/1)**2)+((X8/1)**2)+((X2/1)**2)*((X3/1)**2)+((X2/1)**2)*((X4/1)**2)+((X2/1)**2)*((X8/1)**2)+((X3/1)**2)*((X4/1)**2)+((X3/1)**2)*((X8/1)**2)+((X4/1)**2)*((X8/1)**2)+((X2/1)**2)*((X3/1)**2)*((X4/1)**2)+((X2/1)**2)*((X3/1)**2)*((X8/1)**2)+((X2/1)**2)*((X4/1)**2)*((X8/1)**2)+((X3/1)**2)*((X4/1)**2)*((X8/1)**2)+((X2/1)**2)*((X3/1)**2)*((X4/1)**2)*((X8/1)**2))+10*(((X2/1)**2)*((X4/1)**2)*((X8/1)**2))/(1+((X2/1)**2)+((X3/1)**2)+((X4/1)**2)+((X8/1)**2)+((X2/1)**2)*((X3/1)**2)+((X2/1)**2)*((X4/1)**2)+((X2/1)**2)*((X8/1)**2)+((X3/1)**2)*((X4/1)**2)+((X3/1)**2)*((X8/1)**2)+((X4/1)**2)*((X8/1)**2)+((X2/1)**2)*((X3/1)**2)*((X4/1)**2)+((X2/1)**2)*((X3/1)**2)*((X8/1)**2)+((X2/1)**2)*((X4/1)**2)*((X8/1)**2)+((X3/1)**2)*((X4/1)**2)*((X8/1)**2)+((X2/1)**2)*((X3/1)**2)*((X4/1)**2)*((X8/1)**2))+10*(((X2/1)**2))/(1+((X2/1)**2)+((X3/1)**2)+((X4/1)**2)+((X8/1)**2)+((X2/1)**2)*((X3/1)**2)+((X2/1)**2)*((X4/1)**2)+((X2/1)**2)*((X8/1)**2)+((X3/1)**2)*((X4/1)**2)+((X3/1)**2)*((X8/1)**2)+((X4/1)**2)*((X8/1)**2)+((X2/1)**2)*((X3/1)**2)*((X4/1)**2)+((X2/1)**2)*((X3/1)**2)*((X8/1)**2)+((X2/1)**2)*((X4/1)**2)*((X8/1)**2)+((X3/1)**2)*((X4/1)**2)*((X8/1)**2)+((X2/1)**2)*((X3/1)**2)*((X4/1)**2)*((X8/1)**2))+10*(((X3/1)**2)*((X4/1)**2)*((X8/1)**2))/(1+((X2/1)**2)+((X3/1)**2)+((X4/1)**2)+((X8/1)**2)+((X2/1)**2)*((X3/1)**2)+((X2/1)**2)*((X4/1)**2)+((X2/1)**2)*((X8/1)**2)+((X3/1)**2)*((X4/1)**2)+((X3/1)**2)*((X8/1)**2)+((X4/1)**2)*((X8/1)**2)+((X2/1)**2)*((X3/1)**2)*((X4/1)**2)+((X2/1)**2)*((X3/1)**2)*((X8/1)**2)+((X2/1)**2)*((X4/1)**2)*((X8/1)**2)+((X3/1)**2)*((X4/1)**2)*((X8/1)**2)+((X2/1)**2)*((X3/1)**2)*((X4/1)**2)*((X8/1)**2))+10*(((X3/1)**2))/(1+((X2/1)**2)+((X3/1)**2)+((X4/1)**2)+((X8/1)**2)+((X2/1)**2)*((X3/1)**2)+((X2/1)**2)*((X4/1)**2)+((X2/1)**2)*((X8/1)**2)+((X3/1)**2)*((X4/1)**2)+((X3/1)**2)*((X8/1)**2)+((X4/1)**2)*((X8/1)**2)+((X2/1)**2)*((X3/1)**2)*((X4/1)**2)+((X2/1)**2)*((X3/1)**2)*((X8/1)**2)+((X2/1)**2)*((X4/1)**2)*((X8/1)**2)+((X3/1)**2)*((X4/1)**2)*((X8/1)**2)+((X2/1)**2)*((X3/1)**2)*((X4/1)**2)*((X8/1)**2))+10*(((X4/1)**2))/(1+((X2/1)**2)+((X3/1)**2)+((X4/1)**2)+((X8/1)**2)+((X2/1)**2)*((X3/1)**2)+((X2/1)**2)*((X4/1)**2)+((X2/1)**2)*((X8/1)**2)+((X3/1)**2)*((X4/1)**2)+((X3/1)**2)*((X8/1)**2)+((X4/1)**2)*((X8/1)**2)+((X2/1)**2)*((X3/1)**2)*((X4/1)**2)+((X2/1)**2)*((X3/1)**2)*((X8/1)**2)+((X2/1)**2)*((X4/1)**2)*((X8/1)**2)+((X3/1)**2)*((X4/1)**2)*((X8/1)**2)+((X2/1)**2)*((X3/1)**2)*((X4/1)**2)*((X8/1)**2))+10*(((X8/1)**2))/(1+((X2/1)**2)+((X3/1)**2)+((X4/1)**2)+((X8/1)**2)+((X2/1)**2)*((X3/1)**2)+((X2/1)**2)*((X4/1)**2)+((X2/1)**2)*((X8/1)**2)+((X3/1)**2)*((X4/1)**2)+((X3/1)**2)*((X8/1)**2)+((X4/1)**2)*((X8/1)**2)+((X2/1)**2)*((X3/1)**2)*((X4/1)**2)+((X2/1)**2)*((X3/1)**2)*((X8/1)**2)+((X2/1)**2)*((X4/1)**2)*((X8/1)**2)+((X3/1)**2)*((X4/1)**2)*((X8/1)**2)+((X2/1)**2)*((X3/1)**2)*((X4/1)**2)*((X8/1)**2))
    dY2 = -Y2*0.1+10*(((X1/8)**10))/(1+((X1/8)**10))
    dY3 = -Y3*0.1+10*(((X2/8)**10))/(1+((X2/8)**10))
    dY4 = -Y4*0.1+10*(((X3/8)**10))/(1+((X3/8)**10))
    dY5 = -Y5*0.1+10*(((X4/8)**10))/(1+((X4/8)**10))
    dY6 = -Y6*0.1+10*(((X5/5)**2))/(1+((X5/5)**2))
    dY7 = -Y7*0.1+10*(((X6/5)**2))/(1+((X6/5)**2))
    dY8 = -Y8*0.1+10*(((X7/5)**2))/(1+((X7/5)**2))
    return np.array([dX1, dX2, dX3, dX4, dX5, dX6, dX7, dX8, dY1, dY2, dY3, dY4, dY5, dY6, dY7, dY8])

def solve_model_steady(state):
    return solve_model(0, state)
